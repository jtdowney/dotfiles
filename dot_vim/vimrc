call plug#begin('~/.vim/plugged')

Plug 'arcticicestudio/nord-vim'
Plug 'b4b4r07/vim-hcl'
Plug 'cespare/vim-toml'
Plug 'cstrahan/vim-capnp'
Plug 'easymotion/vim-easymotion'
Plug 'ekalinin/Dockerfile.vim'
Plug 'elixir-editors/vim-elixir'
Plug 'francoiscabrol/ranger.vim'
Plug 'gleam-lang/gleam.vim'
Plug 'jlanzarotta/bufexplorer'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'mattn/vim-lsp-settings'
Plug 'mhinz/vim-mix-format'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'preservim/nerdtree'
Plug 'preservim/vimux'
Plug 'rust-lang/rust.vim'
Plug 'sirtaj/vim-openscad'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/Align'
Plug 'vim-scripts/asmM6502.vim'
Plug 'w0rp/ale'
Plug 'ziglang/zig.vim'

Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
Plug 'vim-test/vim-test'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

call plug#end()

if &t_Co == 256
  try
    colorscheme nord
  catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme slate
  endtry
endif

syntax on
filetype plugin indent on

set hidden
set nobackup
set nowritebackup
set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes
set background=dark
set encoding=utf-8
set hlsearch
set incsearch
set number
set backspace=indent,eol,start
set ruler
set wrap
set scrolloff=5
set textwidth=0
set nosmartindent
set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
set ignorecase
set smartcase
set wildignore+=*.o,*.pyc,*.class,*.beam
set nofoldenable
set path+=**
set wildmenu

imap <C-L> <SPACE>=><SPACE>

nnoremap <silent> k gk
nnoremap <silent> j gj
nnoremap <silent> Y y$

augroup spelling
  autocmd!
  autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en_us
  autocmd FileType tex setlocal spell spelllang=en_us
augroup END

highlight ExtraWhitespace ctermbg=red guibg=red
augroup whitespace
  autocmd!
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd BufRead,InsertLeave * match ExtraWhitespace /\s\+$/
  autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
augroup END

let mapleader=' '
let maplocalleader = ','
let g:airline#extensions#ale#enabled = 1
let g:airline_powerline_fonts = 1
let g:VimuxHeight = 35
let g:VimuxOrientation = 'h'
let test#strategy = 'vimux'
let $FZF_DEFAULT_COMMAND = 'find * -type f 2>/dev/null | grep -v -E "deps\/|_build\/|node_modules\/|vendor\/|build_intellij\/"'
let $FZF_DEFAULT_OPTS = '--reverse'
let g:fzf_tags_command = 'ctags -R --exclude=".git" --exclude="node_modules" --exclude="vendor" --exclude="log" --exclude="tmp" --exclude="db" --exclude="pkg" --exclude="deps" --exclude="_build" --extra=+f .'
let g:ale_completion_enabled = 1
let g:ale_fix_on_save = 1
let g:endwise_no_mappings = 1
let g:ranger_map_keys = 0
let g:mix_format_on_save = 1

nmap <silent> <leader>d :NERDTreeToggleVCS<CR>
nmap <silent> <leader>fe :Ranger<CR>
nmap <silent> <leader>fd :NERDTreeFind<CR>
nmap <silent> <leader>ff :Files<CR>
nmap <silent> <leader>pf :GFiles<CR>
nmap <silent> <leader>bb :Buffers<CR>
nmap <silent> <leader>ft :Tags<CR>
nmap <silent> <leader>/ :Rg<CR>
nmap <silent> <leader>vp :VimuxPromptCommand<CR>
nmap <silent> <leader>vl :VimuxRunLastCommand<CR>
nmap <silent> <leader>vi :VimuxInspectRunner<CR>
nmap <silent> <localleader>tt :w<CR> :TestNearest<CR>
nmap <silent> <localleader>tb :w<CR> :TestFile<CR>
nmap <silent> <localleader>ta :wa<CR> :TestSuite<CR>
nmap <silent> <localleader>tl :w<CR> :TestLast<CR>

function! s:on_lsp_buffer_enabled() abort
  setlocal signcolumn=yes
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> <leader>a <plug>(lsp-code-action)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)
  nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
  nmap <buffer> K <plug>(lsp-hover)

  let g:lsp_format_sync_timeout = 1000
  autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
